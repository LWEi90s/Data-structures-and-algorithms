1.
#include<stdio.h>

void test(int x)
{
	x=1024;
	printf("test函数内部 x=%d\n",x);
}

int main()
{
	int x=1;
	printf("调用test前x=%d\n",x);
	test(x);
	printf("调用test后x=%d\n",x);
}


2.
#include<stdio.h>

void test(int & x)  //&引用负号，将结果带回来
{
	x=1024;
	printf("test函数内部 x=%d\n",x);
}

int main()
{
	int x=1;
	printf("调用test前x=%d\n",x);
	test(x);
	printf("调用test后x=%d\n",x);
}

3.顺序表的静态分配
#include<stdio.h>

#define MaxSize 10 //定义最大长度

typedef struct{
    int data[MaxSize];//用静态的数组存放数据元素
    int length;//顺序表的当前长度
}SqList;//顺序表的类型定义

//初始化一个顺序表
void  InitList(SqList &L){
    for(int i=0;i<MaxSize;i++)
        L.data[i]=0;//将所有的数据元素设置为默认的初始值
    L.length=0;//顺序表初识长度为0
}

int main(){
    SqList L;//声明一个顺序表
    InitList(L);//初始化一个顺序表
    
    return 0;
}

4.顺序表的动态分配
#include<stdio.h>
#include<stdlib.h>

#define InitSize 10 //默认的最大长度

typedef struct{
    int *data;//指示动态分配数组的指针
    int MaxSize;//用静态的数组存放数据元素
    int length;//顺序表的当前长度
}SqList;//顺序表的类型定义

//初始化一个动态顺序表
void  InitList(SqList &L){
    //用molloc函数申请一片连续的存储空间
    L.data=(int *)malloc(sizeof(int)*InitSize);
    L.length=0;//顺序表初识长度为0
    L.MaxSize=InitSize;
}

//增加动态数组的长度
void IncreaseSize(SqList &L, int len){
    int *p=L.data;//定义一个指针P原来存放L.data的地址，开辟一个新的地址
    L.data=(int *)malloc(sizeof(int)*(L.MaxSize+len));
    for(int i=0;i<L.length;i++)
        L.data[i]=p[i];//将数据复制到新区域
    L.MaxSize=L.MaxSize+len;
    free(p);//释放原来的内存空间
}

int main(){
    SqList L;//声明一个顺序表
    InitList(L);//初始化一个顺序表
    
    IncreaseSize(L,5);
        
    return 0;
}

5.顺序表的插入
#include<stdio.h>

#define MaxSize 10 //定义最大长度

typedef struct{
    int data[MaxSize];//用静态的数组存放数据元素
    int length;//顺序表的当前长度
}SqList;//顺序表的类型定义

//初始化一个顺序表
void  InitList(SqList &L){
    for(int i=0;i<MaxSize;i++)
        L.data[i]=0;//将所有的数据元素设置为默认的初始值
    L.length=0;//顺序表初识长度为0
}

bool  ListInsert(SqList &L, int i, int e){
    if(i<1||i>L.length)
        return false;
    if(L.length>MaxSize)
        return false;
    
    for(int j=L.length;i<=j;j--)
        L.data[j]=L.data[j-1];//将第i个元素及之后的元素后移
    L.data[i-1]=e;//在位置i处放入e
    L.length++;//顺序表长度+1
    
    return true;
}

int main(){
    SqList L;//声明一个顺序表
    InitList(L);//初始化一个顺序表
    // int L.data[4]={1,2,4,5};
    // for(int k=0;k<sizeof(L.data)/sizeof(L.data[0]);k++)
    //     printf("%d",L.data[k]);
    ListInsert(L,3,3);
    // for(int k=0;k<sizeof(L.data)/sizeof(L.data[0]);k++)
    //     printf("%d",L.data[k]);   
    return 0;
}

6.顺序表的删除
#include<stdio.h>

#define MaxSize 10 //定义最大长度

typedef struct{
    int data[MaxSize];//用静态的数组存放数据元素
    int length;//顺序表的当前长度
}SqList;//顺序表的类型定义

//初始化一个顺序表
void  InitList(SqList &L){
    for(int i=0;i<MaxSize;i++)
        L.data[i]=0;//将所有的数据元素设置为默认的初始值
    L.length=0;//顺序表初识长度为0
}

bool  ListDelete(SqList &L, int i, int &e){
    if(i<1||i>L.length)
        return false;//判断i的范围是否有效
    if(L.length>MaxSize)
        return false;//判断i的范围是否有效
    
    for(int j=L.length;i<=j;j--)
        L.data[j-1]=L.data[j];//将第i个元素及之后的元素前移
    L.length--;//顺序表长度-1
    
    return true;
}

int main(){
    SqList L;//声明一个顺序表
    InitList(L);//初始化一个顺序表
    int e=-1;
    if(ListDelete(L,3,e))
        printf("已经删除第3个元素，删除元素值为%d\n",e);
    else
        printf("位序不合法，删除失败\n");
    return 0;
    // for(int k=0;k<sizeof(L.data)/sizeof(L.data[0]);k++)
    //     printf("%d",L.data[k]);   
    return 0;
}

7.顺序表的查找
按位
#include<stdio.h>

#define MaxSize 10 //定义最大长度

typedef struct{
    ElemType data[MaxSize];//用静态的数组存放数据元素
    int length;//顺序表的当前长度
}SqList;//顺序表的类型定义

//初始化一个顺序表
void  InitList(SqList &L){
    for(int i=0;i<MaxSize;i++)
        L.data[i]=0;//将所有的数据元素设置为默认的初始值
    L.length=0;//顺序表初识长度为0
}

ElemType GetElem(SqList L, int i){
    return L.data[i-1];
}

按值查找：
#include<stdio.h>

#define MaxSize 10 //定义最大长度

typedef struct{
    int *data;//用动态态的数组存放数据元素
    int MaxSize;
    int length;//顺序表的当前长度
}SqList;//顺序表的类型定义

//初始化一个顺序表
void  InitList(SqList &L){
    for(int i=0;i<MaxSize;i++)
        L.data[i]=0;//将所有的数据元素设置为默认的初始值
    L.length=0;//顺序表初识长度为0
}

//在顺序表中查找第一个等于e的元素，并返回其位序
ElemType LocateElem(SqList L, int e){
    for(int i=0;i<L.length;i++)
        if(L.data[i]==e)
            return i+1;
    return 0;
}